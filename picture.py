import matplotlib.pyplot as plt
import numpy as np


def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        plt.text(rect.get_x() + rect.get_width() / 2. - 0.2, 1.03 * height, '%s' % int(height), fontsize=6)


# x轴的坐标，epoch迭代次数
x = [15, 30, 45, 60, 75, 90]
# 原图等分成4分
y1 = [0.830294, 0.865483, 0.873474, 0.898533, 0.906413, 0.848382]

# 直接用整张原图训练
y2 = [0.874821, 0.889869, 0.905940, 0.900915, 0.902025, 0.913248]

# 一整张和四等分图叠加在一起进行测试
y3 = [0.885553, 0.904673, 0.913357, 0.909106, 0.914786, 0.916362]

# 根据牙齿轮廓四等分
y4 = [0.845646, 0.828174, 0.847674, 0.862293, 0.888230, 0.869493]
fig, ax = plt.subplots()

# 粗分割和细分割结果
y5 = [0.868471, 0.907010, 0.903834, 0.912875, 0.851250, 0.926747]
y6 = [0.926904, 0.930818, 0.929364, 0.930261, 0.925172, 0.932678]

# 牙齿11 和41 的对比,全图四等分，探究上半牙齿部分的dice值是否比下半部分的低，上半牙齿被分开了
y7 = [0.815226, 0.802026, 0.811633, 0.833104, 0.850696, 0.847195]

x2 = list(range(1, 91))
# 只用原图训练的损失函数,训练所用时间[12352.058441]
y8 = [0.037237,
      0.015470,
      0.008477,
      0.006902,
      0.005925,
      0.005386,
      0.004897,
      0.004531,
      0.004207,
      0.003947,
      0.003701,
      0.003511,
      0.003333,
      0.003156,
      0.003011,
      0.002884,
      0.002777,
      0.002662,
      0.002554,
      0.002466,
      0.002372,
      0.002300,
      0.002223,
      0.002155,
      0.002087,
      0.002032,
      0.001982,
      0.001927,
      0.001892,
      0.001865,
      0.001788,
      0.001741,
      0.001712,
      0.001674,
      0.001636,
      0.001622,
      0.001651,
      0.001584,
      0.001529,
      0.001499,
      0.001464,
      0.001439,
      0.001413,
      0.001397,
      0.001392,
      0.001370,
      0.001346,
      0.001331,
      0.001311,
      0.001300,
      0.001291,
      0.001268,
      0.001257,
      0.001250,
      0.001238,
      0.001230,
      0.001217,
      0.001200,
      0.001210,
      0.001195,
      0.001176,
      0.001160,
      0.001160,
      0.001148,
      0.001147,
      0.001137,
      0.001128,
      0.001116,
      0.001114,
      0.001104,
      0.001099,
      0.001091,
      0.001087,
      0.001090,
      0.001073,
      0.001064,
      0.001062,
      0.001059,
      0.001054,
      0.001047,
      0.001047,
      0.001038,
      0.001032,
      0.001028,
      0.001027,
      0.001020,
      0.001019,
      0.001021,
      0.001014,
      0.001017]
# 用原图和旋转之后的图训练的损失函数，训练所需时间[24274.005424]
y9 = [0.028028,
      0.008096,
      0.006087,
      0.005120,
      0.004397,
      0.003968,
      0.003535,
      0.003198,
      0.002974,
      0.002724,
      0.002543,
      0.002382,
      0.002255,
      0.002138,
      0.002036,
      0.001968,
      0.001891,
      0.001819,
      0.001747,
      0.001672,
      0.001621,
      0.001571,
      0.001528,
      0.001494,
      0.001456,
      0.001423,
      0.001390,
      0.001365,
      0.001379,
      0.001415,
      0.001332,
      0.001289,
      0.001253,
      0.001226,
      0.001204,
      0.001190,
      0.001174,
      0.001162,
      0.001151,
      0.001141,
      0.001133,
      0.001122,
      0.001112,
      0.001101,
      0.001091,
      0.001087,
      0.001918,
      0.001408,
      0.001185,
      0.001103,
      0.001065,
      0.001046,
      0.001036,
      0.001024,
      0.001020,
      0.001012,
      0.001002,
      0.001001,
      0.000994,
      0.000992,
      0.000987,
      0.000981,
      0.000979,
      0.000977,
      0.000975,
      0.000974,
      0.000975,
      0.000974,
      0.000969,
      0.000967,
      0.000965,
      0.000958,
      0.000960,
      0.000961,
      0.000958,
      0.000954,
      0.000956,
      0.000950,
      0.000946,
      0.000950,
      0.000957,
      0.000944,
      0.000942,
      0.000939,
      0.000940,
      0.000945,
      0.000945,
      0.000942,
      0.000938,
      0.000936]
# 用原图和高斯模糊之后的图训练的损失函数，训练所需时间[25003.213752]
y10 = [0.025198,
       0.007286,
       0.005539,
       0.004753,
       0.004112,
       0.003622,
       0.003260,
       0.002947,
       0.002699,
       0.002500,
       0.002337,
       0.002210,
       0.002064,
       0.001944,
       0.001872,
       0.001773,
       0.001693,
       0.001618,
       0.001568,
       0.001508,
       0.001465,
       0.001418,
       0.001383,
       0.001339,
       0.001310,
       0.001283,
       0.001255,
       0.001237,
       0.001214,
       0.001197,
       0.001170,
       0.001157,
       0.001145,
       0.001124,
       0.001106,
       0.001099,
       0.001083,
       0.001075,
       0.001058,
       0.001050,
       0.001044,
       0.001044,
       0.001039,
       0.001023,
       0.001021,
       0.001003,
       0.000998,
       0.000988,
       0.000984,
       0.000982,
       0.000981,
       0.000981,
       0.000973,
       0.000976,
       0.000964,
       0.000962,
       0.000955,
       0.000950,
       0.000949,
       0.000949,
       0.000942,
       0.000936,
       0.000936,
       0.000936,
       0.000930,
       0.000936,
       0.000933,
       0.000931,
       0.000931,
       0.000917,
       0.000915,
       0.000922,
       0.000914,
       0.000912,
       0.000916,
       0.000916,
       0.000911,
       0.000905,
       0.000899,
       0.000902,
       0.000907,
       0.000905,
       0.000906,
       0.000902,
       0.000897,
       0.000897,
       0.000900,
       0.000894,
       0.000894,
       0.000895]
# 用原图、旋转图和高斯模糊之后的图训练的损失函数，训练所需时间[41700.823884]
y11 = [0.020413,
       0.006156,
       0.004719,
       0.003900,
       0.003303,
       0.002904,
       0.002610,
       0.002366,
       0.002183,
       0.002026,
       0.001898,
       0.001793,
       0.001702,
       0.001623,
       0.001574,
       0.001503,
       0.001436,
       0.001385,
       0.001346,
       0.001329,
       0.001282,
       0.001260,
       0.001216,
       0.001195,
       0.001188,
       0.001157,
       0.001147,
       0.001137,
       0.001115,
       0.001099,
       0.001087,
       0.001073,
       0.001060,
       0.001055,
       0.001041,
       0.001081,
       0.001037,
       0.001017,
       0.001016,
       0.001005,
       0.001002,
       0.000989,
       0.000988,
       0.001004,
       0.001001,
       0.000997,
       0.000986,
       0.000976,
       0.000972,
       0.000966,
       0.000963,
       0.000959,
       0.000958,
       0.000948,
       0.000947,
       0.000945,
       0.000944,
       0.000938,
       0.000941,
       0.000955,
       0.000946,
       0.000939,
       0.000951,
       0.000938,
       0.000935,
       0.000927,
       0.000933,
       0.000926,
       0.000930,
       0.000920,
       0.000915,
       0.000913,
       0.000916,
       0.002875,
       0.001987,
       0.001398,
       0.001198,
       0.001101,
       0.001042,
       0.000996,
       0.000968,
       0.000947,
       0.000937,
       0.000922,
       0.000912,
       0.000907,
       0.000901,
       0.000894,
       0.000892,
       0.000888]

# 只用原图数据进行训练
y12 = [0.844566, 0.875780, 0.879701, 0.890291, 0.897285, 0.901477]
# 用原图和旋转图进行训练
y13 = [0.879532, 0.892149, 0.903565, 0.907740, 0.911182, 0.917178]
# 用原图和高斯模糊图进行训练
y14 = [0.869267, 0.896568, 0.898781, 0.902611, 0.908005, 0.907758]
# 原图，旋转图、高斯模糊图进行训练
y15 = [0.868471, 0.907010, 0.903834, 0.912875, 0.851250, 0.926747]

# 画柱状图

index = np.arange(len(y1))
bar_width = 0.35

rect1 = ax.bar(index, y5, bar_width, color="r", label="Phase I")
rect2 = ax.bar(index + bar_width, y6, bar_width, color="b", label="phase II")
# rect3 = ax.bar(index + 2*bar_width, y14, bar_width, color="y", label="original pictures and blurred pictures")
# rect4 = ax.bar(index + 3*bar_width, y15, bar_width, color="g", label="all pictures")
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(x)

plt.xlabel("epoch")
plt.ylabel("dice")
plt.title("The value of dice under different epoch")

plt.ylim(0.8, 1)
plt.legend()  # 显示左下角的图例
fig.tight_layout()
plt.show()


# 画折线图
'''
plt.plot(x2, y8, color="red", label="original pictures")
plt.plot(x2, y9, color="y", label="original pictures and rotated pictures")
plt.plot(x2, y10, color="blue", label="original pictures and blurred pictures")
plt.plot(x2, y11, color="green", label="all pictures")

plt.xlabel("epoch")
plt.ylabel("loss")
plt.title("The value of loss under different epoch")
plt.ylim(0, 0.004)
plt.legend()  # 显示左下角的图例
fig.tight_layout()
plt.show()
'''